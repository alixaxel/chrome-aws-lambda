---
- name: Bootstrap AWS
  hosts: localhost
  gather_facts: false

  tasks:
    - name: Creating SSH Key
      shell: |
        ssh-keygen -b 2048 -t rsa -f ansible.pem -q -N '' && \
        chmod 0600 ansible.pem.pub
      args:
        chdir: ..
        creates: ansible.pem

    - name: Creating EC2 Key Pair
      ec2_key:
        name: ansible
        state: present
        region: "{{ region }}"
        key_material: "{{ item }}"
      with_file: ../ansible.pem.pub

    - name: Creating Security Group
      ec2_group:
        name: Chromium
        description: SSH Access
        state: present
        region: "{{ region }}"
        rules:
          - proto: tcp
            to_port: 22
            from_port: 22
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: Launching EC2 Instance
      ec2:
        group: Chromium
        image: "{{ image }}"
        instance_type: c5a.8xlarge
        instance_initiated_shutdown_behavior: terminate
        key_name: ansible
        wait: yes
        zone: "{{ region }}a"
        spot_type: one-time
        spot_price: "1.00"
        spot_wait_timeout: 300
        spot_launch_group: chromium
        region: "{{ region }}"
        state: present
        volumes:
          - device_name: /dev/xvda
            delete_on_termination: true
            volume_size: 128
            volume_type: gp2
        instance_tags:
          Name: Chromium
      register: ec2

    - name: Registering Host
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: aws
      with_items: "{{ ec2.instances }}"

    - name: Waiting for SSH
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        timeout: 120
        state: started
      with_items: "{{ ec2.instances }}"

- name: AWS
  user: ubuntu
  hosts: aws
  gather_facts: true
  environment:
    LANG: en_US.UTF-8
    LC_ALL: en_US.UTF-8
    PATH: "{{ ansible_env.PATH }}:/srv/source/depot_tools"

  tasks:
    - name: Installing Packages
      become: true
      become_user: root
      apt:
        name:
          - brotli
          - cmake
          - htop
        state: latest
        update_cache: true

    - name: Checking for NVMe SSD Device
      become: true
      become_user: root
      stat:
        path: /dev/nvme1n1
      register: nvme

    - name: Creating NVMe SSD Filesystem
      become: true
      become_user: root
      filesystem:
        dev: /dev/nvme1n1
        fstype: xfs
      when: nvme.stat.exists

    - name: Mounting NVMe SSD Filesystem
      become: true
      become_user: root
      shell: |
        mount /dev/nvme1n1 /srv
      args:
        warn: false
      when: nvme.stat.exists

    - name: Creating Directory Structure
      become: true
      become_user: root
      file:
        path: /srv/{{ item }}/chromium
        state: directory
        recurse: true
      with_items:
        - build
        - source

    - name: Cloning Depot Tools
      become: true
      become_user: root
      git:
        repo: https://chromium.googlesource.com/chromium/tools/depot_tools.git
        dest: /srv/source/depot_tools
        force: yes
        update: yes

    - name: Checking for Chromium
      become: true
      become_user: root
      stat:
        path: /srv/source/chromium/.gclient
      register: gclient

    - name: Fetching Chromium
      become: true
      become_user: root
      shell: |
        fetch --nohooks chromium
      args:
        chdir: /srv/source/chromium
      when: gclient.stat.exists != true

    - name: Installing Build Dependencies
      become: true
      become_user: root
      shell: |
        ./build/install-build-deps.sh --no-prompt
      args:
        chdir: /srv/source/chromium/src
      when: gclient.stat.exists != true

    - name: Resolving Puppeteer Version
      uri:
        url: "https://raw.githubusercontent.com/GoogleChrome/puppeteer/{{ puppeteer_version | default('main') }}/src/revisions.ts"
        return_content: yes
      register: puppeteer_revisions

    - name: Resolving Chromium Revision from Puppeteer Version
      become: true
      become_user: root
      set_fact:
        chromium_revision: >
          {{ puppeteer_revisions.content | regex_search("chromium: [']([0-9]+)[']", '\1') | first }}

    - name: Resolving Git Commit from Chromium Revision
      become: true
      become_user: root
      uri:
        url: "https://cr-rev.appspot.com/_ah/api/crrev/v1/redirect/{{ chromium_revision }}"
        return_content: yes
      register: revision

    - name: Synchronizing Chromium
      become: true
      become_user: root
      shell: |
        gclient sync --delete_unversioned_trees --revision src@{{ revision.json.git_sha }} --with_branch_heads
      args:
        chdir: /srv/source/chromium

    - name: Patching Chromium
      become: true
      become_user: root
      lineinfile:
        path: "/srv/source/chromium/src/content/browser/{{ item.path }}"
        line: "{{ item.line }}"
        regexp: "{{ item.regexp }}"
        state: present
        backrefs: yes
      with_items:
        - {
            path: 'sandbox_ipc_linux.cc',
            line: '\1PLOG(WARNING) << "poll"; failed_polls = 0;',
            regexp: '^(\s+)PLOG[(]WARNING[)] << "poll";$',
          }
        - {
            path: 'renderer_host/render_process_host_impl.cc',
            line: '\1// \2\3',
            regexp: '^(  )(\s*)(CHECK[(]render_process_host->InSameStoragePartition[(])$',
          }
        - {
            path: 'renderer_host/render_process_host_impl.cc',
            line: '\1// \2\3',
            regexp: '^(  )(\s*)(browser_context->GetStoragePartition[(]site_instance,)$',
          }
        - {
            path: 'renderer_host/render_process_host_impl.cc',
            line: '\1// \2\3',
            regexp: '^(  )(\s*)(false /[*] can_create [*]/[)][)][)];)$',
          }

    - name: Creating Build Configuration Directory
      become: true
      become_user: root
      file:
        path: /srv/source/chromium/src/out/Headless
        state: directory
        recurse: true

    - name: Mounting Build Directory in Memory
      become: true
      become_user: root
      shell: |
        mount --types tmpfs --options size=48G,nr_inodes=128k,mode=1777 tmpfs /srv/source/chromium/src/out/Headless
      args:
        warn: false

    - name: Creating Headless Chromium Configuration
      become: true
      become_user: root
      copy:
        content: |
          import("//build/args/headless.gn")
          blink_symbol_level = 0
          dcheck_always_on = false
          disable_histogram_support = false
          enable_basic_print_dialog = false
          enable_basic_printing = true
          enable_keystone_registration_framework = false
          enable_linux_installer = false
          enable_media_remoting = false
          enable_media_remoting_rpc = false
          enable_nacl = false
          enable_one_click_signin = false
          ffmpeg_branding = "Chrome"
          headless_use_embedded_resources = true
          icu_use_data_file = false
          is_component_build = false
          is_debug = false
          proprietary_codecs = true
          symbol_level = 0
          target_cpu = "x64"
          target_os = "linux"
          use_bundled_fontconfig = true
          use_cups = false
          use_pulseaudio = false
          use_sysroot = true
          v8_target_cpu = "x64"
        dest: /srv/source/chromium/src/out/Headless/args.gn

    - name: Generating Headless Chromium Configuration
      become: true
      become_user: root
      shell: |
        gn gen out/Headless
      args:
        chdir: /srv/source/chromium/src

    - name: Compiling Headless Chromium
      become: true
      become_user: root
      shell: |
        autoninja -C out/Headless headless_shell
      args:
        chdir: /srv/source/chromium/src

    - name: Getting Chromium Version
      become: true
      become_user: root
      shell: |
        sed --regexp-extended 's~[^0-9]+~~g' chrome/VERSION | tr '\n' '.' | sed 's~[.]$~~'
      args:
        chdir: /srv/source/chromium/src
        warn: false
      register: version

    - name: Striping Symbols from Chromium Binary
      become: true
      become_user: root
      shell: |
        strip -o /srv/build/chromium/chromium-{{ version.stdout | quote }} out/Headless/headless_shell
      args:
        chdir: /srv/source/chromium/src

    - name: Compressing Chromium
      become: true
      become_user: root
      shell: |
        brotli --best --force {{ item }}
      args:
        chdir: /srv/build/chromium
      with_items:
        - "chromium-{{ version.stdout }}"

    - name: Downloading Chromium
      become: true
      become_user: root
      fetch:
        src: "/srv/build/chromium/{{ item }}"
        dest: ../../../bin/
        flat: yes
        fail_on_missing: true
      with_items:
        - "chromium-{{ version.stdout }}.br"

    - name: Archiving SwiftShader
      become: true
      become_user: root
      shell: |
        tar --directory /srv/source/chromium/src/out/Headless/swiftshader --create --file swiftshader.tar libEGL.so libGLESv2.so
      args:
        chdir: /srv/build/chromium
        creates: /srv/build/chromium/swiftshader.tar
        warn: false

    - name: Compressing SwiftShader
      become: true
      become_user: root
      shell: |
        brotli --best --force swiftshader.tar
      args:
        chdir: /srv/build/chromium
        creates: /srv/build/chromium/swiftshader.tar.br

    - name: Downloading SwiftShader
      become: true
      become_user: root
      fetch:
        src: /srv/build/chromium/swiftshader.tar.br
        dest: ../../../bin/
        flat: yes
        fail_on_missing: true

- name: Teardown AWS
  hosts: localhost
  gather_facts: false

  tasks:
    - name: Terminating EC2 Instance
      ec2:
        wait: yes
        state: absent
        instance_ids: '{{ ec2.instance_ids }}'
        region: "{{ region }}"

    - name: Deleting Security Group
      ec2_group:
        name: Chromium
        state: absent
        region: "{{ region }}"

    - name: Deleting EC2 Key Pair
      ec2_key:
        name: ansible
        state: absent
        region: "{{ region }}"

    - name: Deleting SSH Key
      file:
        path: "../{{ item }}"
        state: absent
      with_items:
        - ansible.pem
        - ansible.pem.pub

---
- name: Bootstrap AWS
  hosts: localhost
  gather_facts: false

  tasks:
    - name: Creating SSH Key
      shell: |
        ssh-keygen -b 2048 -t rsa -f ansible.pem -q -N '' && \
        chmod 0600 ansible.pem.pub
      args:
        chdir: ..
        creates: ansible.pem

    - name: Creating EC2 Key Pair
      ec2_key:
        name: ansible
        state: present
        region: "{{ region }}"
        key_material: "{{ item }}"
      with_file: ../ansible.pem.pub

    - name: Creating Security Group
      ec2_group:
        name: Chromium
        description: SSH Access
        state: present
        region: "{{ region }}"
        rules:
          - proto: tcp
            to_port: 22
            from_port: 22
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: Launching EC2 Instance
      ec2:
        group: Chromium
        image: "{{ image }}"
        instance_type: c5d.4xlarge
        instance_initiated_shutdown_behavior: terminate
        key_name: ansible
        wait: yes
        zone: "{{ region }}a"
        spot_type: one-time
        spot_price: "0.75"
        spot_wait_timeout: 300
        spot_launch_group: chromium
        region: "{{ region }}"
        state: present
        volumes:
          - device_name: /dev/xvda
            delete_on_termination: true
            volume_size: 32
            volume_type: gp2
        instance_tags:
          Name: Chromium
      register: ec2

    - name: Registering Host
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: aws
      with_items: "{{ ec2.instances }}"

    - name: Waiting for SSH
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        timeout: 120
        state: started
      with_items: "{{ ec2.instances }}"

- name: AWS
  user: ec2-user
  hosts: aws
  become: true
  become_user: root
  gather_facts: true
  environment:
    LANG: en_US.UTF-8
    LC_ALL: en_US.UTF-8
    PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/srv/source/depot_tools"

  tasks:
    - name: Installing Packages
      yum:
        name:
          - "@Development Tools"
          - alsa-lib-devel
          - atk-devel
          - binutils
          - bison
          - bluez-libs-devel
          - brlapi-devel
          - bzip2
          - bzip2-devel
          - cairo-devel
          - cmake
          - cups-devel
          - dbus-devel
          - dbus-glib-devel
          - expat-devel
          - fontconfig-devel
          - freetype-devel
          - gcc-c++
          - git
          - glib2-devel
          - glibc
          - gperf
          - gtk3-devel
          - htop
          - httpd
          - java-1.*.0-openjdk-devel
          - libatomic
          - libcap-devel
          - libffi-devel
          - libgbm-devel
          - libgcc
          - libgnome-keyring-devel
          - libjpeg-devel
          - libstdc++
          - libuuid-devel
          - libX11-devel
          - libxkbcommon-x11-devel
          - libXScrnSaver-devel
          - libXtst-devel
          - mercurial
          - mod_ssl
          - ncurses-compat-libs
          - nspr-devel
          - nss-devel
          - pam-devel
          - pango-devel
          - pciutils-devel
          - php
          - php-cli
          - pkgconfig
          - pulseaudio-libs-devel
          - python
          - tar
          - zlib
          - zlib-devel
        state: latest
        update_cache: true

    - name: Creating NVMe SSD Filesystem
      filesystem:
        dev: /dev/nvme1n1
        fstype: xfs

    - name: Mounting NVMe SSD Filesystem
      shell: |
        mount /dev/nvme1n1 /srv
      args:
        warn: false

    - name: Creating Directory Structure
      file:
        path: /srv/{{ item }}/chromium
        state: directory
        recurse: true
      with_items:
        - build
        - source

    - name: Cloning Depot Tools
      git:
        repo: https://chromium.googlesource.com/chromium/tools/depot_tools.git
        dest: /srv/source/depot_tools
        force: yes

    - name: Resolving Chromium Revision from Puppeteer Version
      uri:
        url: "https://raw.githubusercontent.com/GoogleChrome/puppeteer/{{ puppeteer_version | default('master') }}/package.json"
        return_content: yes
      register: puppeteer

    - name: Resolving Git Commit from Chromium Revision
      uri:
        url: "https://cr-rev.appspot.com/_ah/api/crrev/v1/redirect/{{ puppeteer.json.puppeteer.chromium_revision }}"
        return_content: yes
      register: revision

    - name: Fetching Chromium
      shell: |
        fetch chromium
      args:
        chdir: /srv/source/chromium

    - name: Checking Out Chromium Commit
      shell: |
        git checkout {{ revision.json.git_sha }}
      args:
        chdir: /srv/source/chromium/src

    - name: Synchronizing Chromium
      shell: |
        gclient sync --with_branch_heads
      args:
        chdir: /srv/source/chromium

    - name: Patching Chromium
      lineinfile:
        line: "{{ item.line }}"
        regexp: "{{ item.regexp }}"
        path: "/srv/source/chromium/src/{{ item.path }}"
        state: present
        backrefs: yes
      with_items:
        - { path: 'content/browser/sandbox_ipc_linux.cc', regexp: '^(\s+)PLOG[(]WARNING[)] << "poll";$', line: '\1PLOG(WARNING) << "poll"; failed_polls = 0;' }

    - name: Creating Build Configuration Directory
      file:
        mode: 0755
        path: /srv/source/chromium/src/out/Headless
        state: directory

    - name: Mounting Build Directory in Memory
      shell: |
        mount --types tmpfs --options size=32G,nr_inodes=64k,mode=1777 tmpfs /srv/source/chromium/src/out/Headless
      args:
        warn: false

    - name: Creating Headless Chromium Configuration
      copy:
        content: |
          import("//build/args/headless.gn")
          blink_symbol_level = 0
          disable_ftp_support = true
          disable_histogram_support = false
          enable_basic_print_dialog = false
          enable_basic_printing = true
          enable_keystone_registration_framework = false
          enable_linux_installer = false
          enable_media_remoting = false
          enable_media_remoting_rpc = false
          enable_nacl = false
          enable_one_click_signin = false
          ffmpeg_branding = "Chrome"
          headless_use_embedded_resources = true
          icu_use_data_file = false
          is_component_build = false
          is_debug = false
          proprietary_codecs = true
          symbol_level = 0
          target_cpu = "x64"
          target_os = "linux"
          use_bundled_fontconfig = true
          use_cups = false
          use_pulseaudio = false
          use_sysroot = true
          v8_target_cpu = "x64"
        dest: /srv/source/chromium/src/out/Headless/args.gn

    - name: Generating Headless Chromium Configuration
      shell: |
        gn gen out/Headless
      args:
        chdir: /srv/source/chromium/src

    - name: Compiling Headless Chromium
      shell: |
        autoninja -C out/Headless headless_shell
      args:
        chdir: /srv/source/chromium/src

    - name: Getting Chromium Version
      shell: |
        sed --regexp-extended 's~[^0-9]+~~g' chrome/VERSION | tr '\n' '.' | sed 's~[.]$~~'
      args:
        chdir: /srv/source/chromium/src
        warn: false
      register: version

    - name: Striping Symbols from Chromium Binary
      shell: |
        strip -o /srv/build/chromium/chromium-{{ version.stdout | quote }} out/Headless/headless_shell
      args:
        chdir: /srv/source/chromium/src

    - name: Cloning Brotli
      git:
        repo: https://github.com/google/brotli.git
        dest: /srv/source/brotli
        force: yes

    - name: Compiling Brotli
      shell: |
        ./configure-cmake && \
        make && \
        make install
      args:
        chdir: /srv/source/brotli
        creates: /usr/local/bin/brotli

    - name: Compressing Chromium
      shell: |
        brotli --best --force {{ item }}
      args:
        chdir: /srv/build/chromium
      with_items:
        - "chromium-{{ version.stdout }}"

    - name: Downloading Chromium
      fetch:
        src: "/srv/build/chromium/{{ item }}"
        dest: ../../../bin/
        flat: yes
        fail_on_missing: true
      with_items:
        - "chromium-{{ version.stdout }}.br"

    - name: Archiving SwiftShader
      shell: |
        tar --directory /srv/source/chromium/src/out/Headless/swiftshader --create --file swiftshader.tar libEGL.so libGLESv2.so
      args:
        chdir: /srv/build/chromium
        creates: /srv/build/chromium/swiftshader.tar
        warn: false

    - name: Compressing SwiftShader
      shell: |
        brotli --best --force swiftshader.tar
      args:
        chdir: /srv/build/chromium
        creates: /srv/build/chromium/swiftshader.tar.br

    - name: Downloading SwiftShader
      fetch:
        src: /srv/build/chromium/swiftshader.tar.br
        dest: ../../../bin/
        flat: yes
        fail_on_missing: true

- name: Teardown AWS
  hosts: localhost
  gather_facts: false

  tasks:
    - name: Terminating EC2 Instance
      ec2:
        wait: yes
        state: absent
        instance_ids: '{{ ec2.instance_ids }}'
        region: "{{ region }}"

    - name: Deleting Security Group
      ec2_group:
        name: Chromium
        state: absent
        region: "{{ region }}"

    - name: Deleting EC2 Key Pair
      ec2_key:
        name: ansible
        state: absent
        region: "{{ region }}"

    - name: Deleting SSH Key
      file:
        path: "../{{ item }}"
        state: absent
      with_items:
        - ansible.pem
        - ansible.pem.pub
